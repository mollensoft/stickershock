import stream from 'stream';
import { setTimeout } from 'timers/promises';
import Path from '@mojojs/path';
import Template from '@mojojs/template';
import chalk from 'chalk';
export { SafeString } from '@mojojs/template';
// Unmarked codes are from RFC 7231
export const httpStatusMessages = {
    100: 'Continue',
    101: 'Switching Protocols',
    102: 'Processing',
    103: 'Early Hints',
    200: 'OK',
    201: 'Created',
    202: 'Accepted',
    203: 'Non-Authoritative Information',
    204: 'No Content',
    205: 'Reset Content',
    206: 'Partial Content',
    207: 'Multi-Status',
    208: 'Already Reported',
    226: 'IM Used',
    300: 'Multiple Choices',
    301: 'Moved Permanently',
    302: 'Found',
    303: 'See Other',
    304: 'Not Modified',
    305: 'Use Proxy',
    307: 'Temporary Redirect',
    308: 'Permanent Redirect',
    400: 'Bad Request',
    401: 'Unauthorized',
    402: 'Payment Required',
    403: 'Forbidden',
    404: 'Not Found',
    405: 'Method Not Allowed',
    406: 'Not Acceptable',
    407: 'Proxy Authentication Required',
    408: 'Request Timeout',
    409: 'Conflict',
    410: 'Gone',
    411: 'Length Required',
    412: 'Precondition Failed',
    413: 'Request Entity Too Large',
    414: 'Request-URI Too Long',
    415: 'Unsupported Media Type',
    416: 'Request Range Not Satisfiable',
    417: 'Expectation Failed',
    418: "I'm a teapot",
    421: 'Misdirected Request',
    422: 'Unprocessable Entity',
    423: 'Locked',
    424: 'Failed Dependency',
    425: 'Too Early',
    426: 'Upgrade Required',
    428: 'Precondition Required',
    429: 'Too Many Requests',
    431: 'Request Header Fields Too Large',
    451: 'Unavailable For Legal Reasons',
    500: 'Internal Server Error',
    501: 'Not Implemented',
    502: 'Bad Gateway',
    503: 'Service Unavailable',
    504: 'Gateway Timeout',
    505: 'HTTP Version Not Supported',
    506: 'Variant Also Negotiates',
    507: 'Insufficient Storage',
    508: 'Loop Detected',
    509: 'Bandwidth Limit Exceeded',
    510: 'Not Extended',
    511: 'Network Authentication Required' // RFC 6585
};
/**
 * Capture STDOUT/STDERR output.
 */
export async function captureOutput(fn, options = {}) {
    if (options.stdout === undefined)
        options.stdout = true;
    const stream = new CaptureStream();
    const stdoutWrite = process.stdout.write;
    const stderrWrite = process.stderr.write;
    if (options.stdout === true) {
        process.stdout.write = stdoutWrite.bind(stream);
    }
    if (options.stderr === true) {
        process.stderr.write = stderrWrite.bind(stream);
    }
    try {
        await fn();
    }
    finally {
        process.stdout.write = stdoutWrite;
        process.stderr.write = stderrWrite;
    }
    const output = stream.output;
    return output.length > 0 && Buffer.isBuffer(output[0]) ? Buffer.concat(output) : output.join('');
}
/**
 * Create directory for generator commands.
 */
export async function cliCreateDir(path) {
    const dir = new Path(process.cwd(), ...path.split('/'));
    const stdout = process.stdout;
    if ((await dir.exists()) === true) {
        stdout.write(chalk.green(' [exists]') + ` ${dir.toString()}\n`);
        return;
    }
    stdout.write(chalk.green(' [mkdir]') + ` ${dir.toString()}\n`);
    await dir.mkdir({ recursive: true });
}
/**
 * Create file for generator commands.
 */
export async function cliCreateFile(path, template, values = {}, options = {}) {
    const file = new Path(process.cwd(), ...path.split('/'));
    const stdout = process.stdout;
    if ((await file.exists()) === true) {
        stdout.write(chalk.red(' [exists]') + ` ${file.toString()}\n`);
        return;
    }
    stdout.write(chalk.green(' [write]') + ` ${file.toString()}\n`);
    await file.writeFile(await Template.render(template, values));
    if (options.chmod !== undefined) {
        stdout.write(chalk.green(' [chmod]') + ` ${file.toString()} (${options.chmod.toString(8)})\n`);
        await file.chmod(options.chmod);
    }
}
/**
 * Fix package.json file for generator commands.
 */
export async function cliFixPackage(options = {}) {
    const file = new Path(process.cwd(), 'package.json');
    const stdout = process.stdout;
    let pkg;
    if ((await file.exists()) === false) {
        pkg = {};
    }
    else {
        pkg = JSON.parse((await file.readFile()).toString());
    }
    // All mojo.js applications are ESM
    pkg.type = 'module';
    for (const [name, value] of Object.entries(options)) {
        // String
        if (typeof value === 'string') {
            if (pkg[name] === undefined)
                pkg[name] = value;
        }
        // Array
        else if (Array.isArray(value)) {
            pkg[name] = [...new Set([...(pkg[name] ?? []), ...value])];
        }
        // Object
        else {
            if (pkg[name] === undefined)
                pkg[name] = {};
            for (const [key, val] of Object.entries(value)) {
                if (pkg[name][key] === undefined)
                    pkg[name][key] = val;
            }
        }
    }
    stdout.write(chalk.green(' [fixed]') + ` ${file.toString()}\n`);
    await file.writeFile(JSON.stringify(pkg, null, 2));
}
/**
 * Decode URI component, but do not throw an exception if it fails.
 */
export function decodeURIComponentSafe(value) {
    try {
        return decodeURIComponent(value);
    }
    catch (error) {
        return null;
    }
}
/**
 * Generate exception context.
 */
export async function exceptionContext(error, options = {}) {
    const stack = error.stack ?? '';
    const match = stack.split('\n')[1].match(/^\s*at .+ \(([^)]+):(\d+):(\d+)\)\s*$/);
    if (match === null || match[1].startsWith('file://') === false)
        return null;
    const lines = options.lines ?? 3;
    const file = Path.fromFileURL(match[1]);
    const lineNumber = parseInt(match[2]);
    const column = parseInt(match[3]);
    const startLine = lineNumber - lines <= 0 ? 1 : lineNumber - lines;
    const endLine = lineNumber + lines;
    const source = [];
    const context = { file: file.toString(), line: lineNumber, column, source };
    let currentLine = 0;
    for await (const line of file.lines({ encoding: 'utf8' })) {
        currentLine++;
        if (currentLine < startLine)
            continue;
        if (currentLine > endLine)
            break;
        source.push({ num: currentLine, code: line });
    }
    return context;
}
/**
 * JSON pointers.
 */
export function jsonPointer(value, pointer) {
    if (pointer.startsWith('/') === false)
        return pointer.length > 0 ? null : value;
    let data = value;
    for (const part of pointer.replace(/^\//, '').split('/')) {
        const unescaped = part.replaceAll('~1', '/').replaceAll('~0', '~');
        if (typeof data === 'object' && data !== null && data[unescaped] !== undefined) {
            data = data[unescaped];
        }
        else if (Array.isArray(data) && /^\d+$/.test(unescaped) === true) {
            data = data[parseInt(unescaped)];
        }
        else {
            return undefined;
        }
    }
    return data;
}
/**
 * Load modules.
 */
export async function loadModules(dirs) {
    const modules = {};
    for (const dir of dirs.map(path => new Path(path))) {
        if ((await dir.exists()) === false)
            continue;
        for await (const file of dir.list({ recursive: true })) {
            if (/\.m?js$/.test(file.toString()) === false)
                continue;
            const imports = await import(file.toFileURL().toString());
            const name = dir
                .relative(file)
                .toArray()
                .join('/')
                .replace(/\.m?js$/, '');
            modules[name] = imports.default ?? null;
        }
    }
    return modules;
}
/**
 * Sleep asynchronously.
 */
export const sleep = setTimeout;
/**
 * Tablify data structure.
 */
export function tablify(rows = []) {
    const spec = [];
    const table = rows.map(row => {
        return row.map((col, i) => {
            col = `${col ?? ''}`.replace(/[\r\n]/g, '');
            if (col.length >= (spec[i] ?? 0))
                spec[i] = col.length;
            return col;
        });
    });
    const lines = table.map(row => row.map((col, i) => (i === row.length - 1 ? col : col.padEnd(spec[i]))).join('  '));
    return lines.join('\n') + '\n';
}
/**
 * Escape all POSIX control characters except for `\n`.
 */
export function termEscape(value) {
    return [...value]
        .map(char => 
    // eslint-disable-next-line no-control-regex
    /^[\x00-\x09\x0b-\x1f\x7f\x80-\x9f]$/.test(char) ? '\\x' + char.charCodeAt(0).toString(16).padStart(2, '0') : char)
        .join('');
}
class CaptureStream extends stream.Writable {
    constructor() {
        super(...arguments);
        this.output = [];
    }
    _write(chunk, enc, next) {
        this.output.push(chunk);
        next();
    }
}
//# sourceMappingURL=util.js.map